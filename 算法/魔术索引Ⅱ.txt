#include<bits/stdc++.h>
using namespace std;
/**
题目描述
在数组A[0..n-1]中，有所谓的魔术索引，满足条件A[i]=i。给定一个不下降序列，元素值可能相同，编写一个方法，判断在数组A中是否存在魔术索引。请思考一种复杂度优于o(n)的方法。
给定一个int数组A和int n代表数组大小，请返回一个bool，代表是否存在魔术索引。
测试样例：
[1,1,3,4,5]
返回：true

应该是从i：0~n - 1进行遍历，如果当前A[i] == i，返回true；如果A[i] < i， 则i
  ++；如果A[i] > i，则令i = A[i]，即跳过A[i] - i个元素（因为序列是非递减的，所以A[i] >
  i时，至少到i = A[i]处，才有可能出现A[i] == i）。 
  例如2， 2， 2， 4， 5序列，i == 0时，A[i] = 2，则应跳过i = 1，直接比较i = 2处。

*/
class MagicIndex {
public:
    bool findMagicIndex(vector<int> A, int n) {
        if(n == 0)
            return true;
        int i;
        for(i = 0;i < n ;i++){
            if(A[i] == i)
                return true;
            else if(A[i] > i)
                i = A[i];
            else
                i++;
        }
        return false;
    }
};
int main(){
   // cout<<Robot().countWays(2 ,2);
   return 0;
}


