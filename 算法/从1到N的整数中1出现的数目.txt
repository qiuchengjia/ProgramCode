#include<bits/stdc++.h>
using namespace std;
/**
    计算从 1 到 N 的所有整数，1 出现的个数
    假设现在计算数字为 12013
    如果百位为 0 ，那么1出现的个数就等于  高位数字(12)* 当前位数(100)
    如果百位为 1 ，那么1出现的个数就等于  高位数字(12)* 当前位数(100) + 低位数字(113) + 1
    如果百位大于1，那么1出现的个数就等于  (高位数字(12) + 1) * 当前位数(100) 即(12 + 1) * 100
*/
long long  sums(long long n){
    long long result = 0 ;
    long long iFactor = 1;
    long long currentBit = 0 ;
    long long highBit = 0 ;
    long long lowBit = 0 ;
    while(n / iFactor != 0){
        currentBit = (n / iFactor) % 10;
        lowBit = (n - (n / iFactor) * iFactor);
        highBit = n / (iFactor * 10);
        switch(currentBit){
            case 0:
                result += (highBit * iFactor);
                break;
            case 1:
                result += (highBit * iFactor + lowBit + 1);
                break;
            default:
                result += (highBit + 1) * iFactor;
                break;
        }
        iFactor *= 10;
    }
    return result;
}
int main(){
    cout<<sums(12013)<<endl;
}
