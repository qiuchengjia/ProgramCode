#include<bits/stdc++.h>
using namespace std;
/**
如果不是求字符的所有排列，而是求字符的所有组合应该怎么办呢？
还是输入三个字符 a、b、c，则它们的组合有a b c ab ac bc abc。
当然我们还是可以借鉴全排列的思路，利用问题分解的思路，
最终用递归解决。不过这里介绍一种比较巧妙的思路 —— 基于位图。

假设原有元素 n 个，则最终组合结果是 2n−1 个。我们可以用位操作方法：
假设元素原本有：a,b,c 三个，则 1 表示取该元素，0 表示不取。故取a则是001，
取ab则是011。所以一共三位，每个位上有两个选择 0 和 1。而000没有意义，
所以是2n−1个结果。

这些结果的位图值都是 1,2…2^n-1。所以从值 1 到值 2n−1 依次输出结果：

001,010,011,100,101,110,111 。对应输出组合结果为：a,b,ab,c,ac,bc,abc。
因此可以循环 1~2^n-1，然后输出对应代表的组合即可。有代码如下：
*/
void Combination(char *str){
	if(str == NULL)
		return ;
	int len = strlen(str);
	int n = 1<<len;
	//从 1 循环到 2^len -1
	for(int i=1;i<n;i++){
		for(int j=0;j<len;j++){
			int temp = i;
			//对应位上为1，则输出对应的字符
			if(temp & (1<<j)){
				printf("%c",*(str+j));
			}
		}
		printf("\n");
	}
}
int main(){
	char str[] = "abc";
	Combination(str);
}
