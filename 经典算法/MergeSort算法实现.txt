#include<iostream>
#include<stdio.h>
#include<algorithm>
#include<memory.h>
int resultSum = 0 ;
using namespace std;
/**
 * Description:归并排序
 * Blog: www.qiuchengjia.cn
 * Data: 2017-6-4
 * Author: colin
 */
 /**
 * 从小到大排序实现二
*/
 void mergearray(int a[], int first, int mid, int last, int temp[]){
     int i = first;
     int j = mid + 1;
     int k = first;
     while(i <= mid && j <= last){
         if(a[i] >= a[j])
            temp[k++] = a[j++];
         else
            temp[k++] = a[i++];
     }
     while(i <= mid)
        temp[k++] = a[i++];
     while(j <= last)
        temp[k++] = a[j++];
     while(first < last){
        a[first] = temp[first];
        first++;
     }
}
/**
 * 从小到大排序实现一
*/
void Merge2 (int data[], int start, int mid, int end , int temp[]){
    int i = start;
    int j = mid + 1;
    int k = start;
    while (i <= mid && j <= end){
        if (data[i] <= data[j])
            temp[k++] = data[i++];
        else
            temp[k++] = data[j++];
    }
    while (i <= mid)
        temp[k++] = data[i++];

    while (j <= end)
        temp[k++] = data[j++];

    while (start <= end){
        data[start] = temp[start];
        ++start;
    }
}
/**
 * 从大到小排序，并计算数组的逆序数对
*/
 void merge(int *data , int start , int mid , int end , int * temp){
        int i = start , j = mid + 1;
        int index = start;
        while(i <= mid && j <= end){
            if(data[i] > data[j]){
                temp[index++] = data[i++];
                resultSum += (end - j + 1);
            }else{
                temp[index++] = data[j++];
            }
        }
        while(i <= mid)
            temp[index++] = data[i++];
        while(j <= end)
            temp[index++] = data[j++];
        while(start <= end){
            data[start] = temp[start];
            start++;
        }
 }
 void sort(int * data , int start , int end , int * temp){
     if(start < end){
        int mid = (start + end) / 2;
        sort(data , start , mid , temp);
        sort(data , mid + 1 , end , temp);
        merge(data , start , mid , end, temp);
     }
 }
 bool mergeSort(int * data , int len){
    int * temp = new int [len];
    if(data == NULL || temp == NULL || len <= 0)
        return false;
    sort(data , 0 , len - 1 , temp);
    return true;
 }
int main(){
    int arr[4]={7,5,6,4};
    int len = sizeof(arr)/sizeof(arr[0]);
    resultSum = 0 ;
    bool result =mergeSort(arr , len);
    if(result){
        for(int i = 0 ;i < len ;i++){
            printf(" %d " , arr[i]);
        }
    }
    printf("\nInverse number pair= %d\n" , resultSum);
    return 0;
}
