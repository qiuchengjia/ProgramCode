#include<iostream>
#include<stdio.h>
#include<algorithm>
#include<memory.h>
using namespace std;
/**
 * Description:归并排序
 * Blog: www.qiuchengjia.cn
 * Data: 2017-6-4
 * Author: colin
 */
void mergearray(int a[], int first, int mid, int last, int temp[]){
     int i = first;
     int j = mid + 1;
     int k = first;
     while(i <= mid && j <= last){
         if(a[i] >= a[j])
            temp[k++] = a[j++];
         else
            temp[k++] = a[i++];
     }
     while(i <= mid)
        temp[k++] = a[i++];
     while(j <= last)
        temp[k++] = a[j++];
     while(first < last){
        a[first] = temp[first];
        first++;
     }
}
void Merge2 (int data[], int start, int mid, int end , int temp[]){
    int i = start;
    int j = mid + 1;
    int k = start;
    while (i <= mid && j <= end){
        if (data[i] <= data[j])
            temp[k++] = data[i++];
        else
            temp[k++] = data[j++];
    }
    while (i <= mid)
        temp[k++] = data[i++];

    while (j <= end)
        temp[k++] = data[j++];

    while (start <= end){
        data[start] = temp[start];
        ++start;
    }
}
void mergesort(int a[], int first, int last, int temp[]){
    if (first < last){
        int mid = (first + last) / 2;
        mergesort(a, first, mid, temp);
        mergesort(a, mid + 1, last, temp);
       // mergearray(a, first, mid, last, temp);
       Merge2(a,first, mid, last, temp);
    }
}
bool MergeSort(int a[], int n){
    int *p = new int[n];
    if (p == NULL)
        return false;
    mergesort(a, 0, n - 1, p);
    delete[] p;
    return true;
}
int main(){
    int a[10] = {1,5,3,8,3,5,3,12,0,2};
    int len = sizeof(a)/sizeof(a[0]);
    bool result = MergeSort(a , len);
    if(result){
        for(int i = 0 ;i < len ;i++)
            printf("%d ", a[i]);
    }
    return 0;
}
