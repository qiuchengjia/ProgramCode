#include <bits/stdc++.h>
using namespace std;
/**
 * Description:前序和中序重建二叉树
 * Blog: www.qiuchengjia.cn
 * Data: 2017-5-16
 * Author: colin
 */
struct TreeNode{
    TreeNode * left = NULL;
    TreeNode * right = NULL;
    char value;

};
TreeNode * buildTree(char * preOrder , int start , char * inOrder , int end , int length){
    if(preOrder == NULL || (sizeof(preOrder)/sizeof(preOrder[0])) == 0
       || inOrder == NULL || (sizeof(inOrder)/sizeof(inOrder[0])) == 0 || length <= 0)
        return NULL;
     //建立子树根节点
    char value = preOrder[start];
    TreeNode * node = new TreeNode;
    node->value = value;

    //递归终止条件：子树只有一个节点
    if(length == 1)
        return node;
    int i = 0;
    while(i < length){
        if(value == inOrder[end - i]){
            break;
        }
        i++;
    }
    node->left = buildTree(preOrder , start + 1 , inOrder , end - i - 1 , length - i - 1);
    node->right = buildTree(preOrder , start + length - i , inOrder , end ,i);
    return node;
}
TreeNode * bulidTreeSimple(char * preOrder , char * inOrder ,
                           int preStart , int preEnd,
                           int inStart , int inEnd){
        if(preOrder == NULL || inOrder == NULL||
           preStart > preEnd || inStart > inEnd)
            return NULL;
        TreeNode * root = new TreeNode;
        root->value = preOrder[preStart];
        for(int i = inStart ; i <= inEnd ;i++){
            if(inOrder[i] == preOrder[preStart]){
                root->left = bulidTreeSimple(preOrder , inOrder ,
                                              preStart + 1 ,preStart + i - inStart,
                                              inStart , i - 1);
                root->right = bulidTreeSimple(preOrder , inOrder ,
                                              preStart + i - inStart + 1 , preEnd,
                                              i + 1 , inEnd);
            }
        }
        return root;
}
void ergodicTree(TreeNode * root){
    if(root == NULL)
        return;
    printf("%c ," , root->value);
    ergodicTree(root->left);
    ergodicTree(root->right);
}
int main(){
    char preOrder[] = {'a', 'b', 'd', 'c', 'e', 'f'};
    char inOrder[] = {'d', 'b', 'a', 'e', 'c', 'f'};
    TreeNode * root = buildTree(preOrder , 0 , inOrder ,
                                (sizeof(inOrder)/sizeof(inOrder[0])) - 1 ,
                                (sizeof(inOrder)/sizeof(inOrder[0])));
    ergodicTree(root);
    printf("\n");
    int preLen = sizeof(inOrder)/sizeof(inOrder[0]);
    int inLen = sizeof(inOrder)/sizeof(inOrder[0]);
    TreeNode * root2 = bulidTreeSimple(preOrder , inOrder , 0 , preLen - 1 , 0 , inLen -1);
    ergodicTree(root2);
    return 0;
}
